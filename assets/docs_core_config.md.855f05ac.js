import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.a2f82312.js";const f=JSON.parse('{"title":"Configuration","description":"Configuration","frontmatter":{"title":"Configuration","description":"Configuration","head":[["meta",{"name":"og:description","content":"Configuration"}],["meta",{"name":"og:image","content":"https://jsx.email/og.png"}],["meta",{"name":"og:site_name","content":"JSX email"}],["meta",{"name":"og:title","content":"Configuration"}],["meta",{"name":"og:type","content":"website"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:description","content":"Configuration"}],["meta",{"name":"twitter:image","content":"https://jsx.email/og.png"}],["meta",{"name":"twitter:title","content":"Configuration"}]]},"headers":[],"relativePath":"../../../docs/core/config.md","filePath":"../../../docs/core/config.md"}'),l={name:"../../../docs/core/config.md"},e=o(`<h2 id="configuring-jsx-email" tabindex="-1">Configuring jsx-email <a class="header-anchor" href="#configuring-jsx-email" aria-label="Permalink to &quot;Configuring jsx-email&quot;">​</a></h2><p>When running <code>email</code> from the command line or programmatically using the <a href="/docs/core/render"><code>render</code></a> function, jsx-email will attempt to find and use a <code>jsx-email.config</code> file. jsx-email will traverse a directory structure looking for config files until it reaches a git repository root directory, or the OS&#39;s home directory. This is quite fast, and allows for scoping your configuration file at the filesystem level you&#39;d like to. By default, jsx-email looks for configuration files with the following file extensions and locations:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#E6E6E6;">.config/jsx-emailrc.js</span></span>
<span class="line"><span style="color:#E6E6E6;">.config/jsx-emailrc.cjs</span></span>
<span class="line"><span style="color:#E6E6E6;">.config/jsx-emailrc.mjs</span></span>
<span class="line"><span style="color:#E6E6E6;">.config/jsx-email.config.js</span></span>
<span class="line"><span style="color:#E6E6E6;">.config/jsx-email.config.cjs</span></span>
<span class="line"><span style="color:#E6E6E6;">.config/jsx-email.config.mjs</span></span>
<span class="line"><span style="color:#E6E6E6;">.jsx-emailrc.js</span></span>
<span class="line"><span style="color:#E6E6E6;">.jsx-emailrc.cjs</span></span>
<span class="line"><span style="color:#E6E6E6;">.jsx-emailrc.mjs</span></span>
<span class="line"><span style="color:#E6E6E6;">jsx-email.config.js</span></span>
<span class="line"><span style="color:#E6E6E6;">jsx-email.config.cjs</span></span>
<span class="line"><span style="color:#E6E6E6;">jsx-email.config.mjs</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#002339;">.config/jsx-emailrc.js</span></span>
<span class="line"><span style="color:#002339;">.config/jsx-emailrc.cjs</span></span>
<span class="line"><span style="color:#002339;">.config/jsx-emailrc.mjs</span></span>
<span class="line"><span style="color:#002339;">.config/jsx-email.config.js</span></span>
<span class="line"><span style="color:#002339;">.config/jsx-email.config.cjs</span></span>
<span class="line"><span style="color:#002339;">.config/jsx-email.config.mjs</span></span>
<span class="line"><span style="color:#002339;">.jsx-emailrc.js</span></span>
<span class="line"><span style="color:#002339;">.jsx-emailrc.cjs</span></span>
<span class="line"><span style="color:#002339;">.jsx-emailrc.mjs</span></span>
<span class="line"><span style="color:#002339;">jsx-email.config.js</span></span>
<span class="line"><span style="color:#002339;">jsx-email.config.cjs</span></span>
<span class="line"><span style="color:#002339;">jsx-email.config.mjs</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>jsx-email does not currently support TypeScript, YAML, or JSON files.</p></div><h3 id="config-file" tabindex="-1">Config File <a class="header-anchor" href="#config-file" aria-label="Permalink to &quot;Config File&quot;">​</a></h3><p>The most basic configuration file might look like this:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">defineConfig</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;jsx-email/config&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#E6E6E6;">({</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">render:</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">minify:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;"> }</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">defineConfig</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;jsx-email/config&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">defineConfig</span><span style="color:#002339;">({</span></span>
<span class="line"><span style="color:#002339;">  render: { minify: </span><span style="color:#174781;">true</span><span style="color:#002339;"> }</span></span>
<span class="line"><span style="color:#002339;">});</span></span></code></pre></div><p>The named export <code>config</code> is required regardless of how the file is constructed. Note the use of the <code>defineConfig</code> import and the <code>config</code> named export - while any plain object will be accepted and parsed, the use of <code>defineConfig</code> is encouraged for ensuring your config is compliant.</p><h3 id="intellisense" tabindex="-1">Intellisense <a class="header-anchor" href="#intellisense" aria-label="Permalink to &quot;Intellisense&quot;">​</a></h3><p>Since jsx-email ships with TypeScript typings, you can leverage your IDE&#39;s intellisense with jsdoc type hints:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#6A9955;">/** </span><span style="color:#569CD6;">@type</span><span style="color:#6A9955;"> </span><span style="color:#4EC9B0;">{import(&#39;jsx-email/config&#39;).JsxEmailConfig}</span><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> { </span><span style="color:#D4D4D4;">...</span><span style="color:#E6E6E6;"> };</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#357B42;font-style:italic;">/** </span><span style="color:#0991B6;">@type</span><span style="color:#357B42;font-style:italic;"> </span><span style="color:#0444AC;font-style:italic;">{import(&#39;jsx-email/config&#39;).JsxEmailConfig}</span><span style="color:#357B42;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> { </span><span style="color:#7B30D0;">...</span><span style="color:#002339;"> };</span></span></code></pre></div><h3 id="async-configuration" tabindex="-1">Async Configuration <a class="header-anchor" href="#async-configuration" aria-label="Permalink to &quot;Async Configuration&quot;">​</a></h3><p>The <code>config</code> export inherently supports <code>Promise</code>. This is helpful when needing to perform other async operations before returning a value to the export. This can be done in a few ways:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> (</span><span style="color:#569CD6;">async</span><span style="color:#E6E6E6;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> { </span><span style="color:#D4D4D4;">...</span><span style="color:#E6E6E6;"> })();</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> (</span><span style="color:#DA5221;">async</span><span style="color:#002339;"> () </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> { </span><span style="color:#7B30D0;">...</span><span style="color:#002339;"> })();</span></span></code></pre></div><p>Or</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Promise</span><span style="color:#E6E6E6;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> { </span><span style="color:#D4D4D4;">...</span><span style="color:#E6E6E6;"> })</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">Promise</span><span style="color:#002339;">((</span><span style="color:#B1108E;">resolve</span><span style="color:#002339;">, </span><span style="color:#B1108E;">reject</span><span style="color:#002339;">) </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> { </span><span style="color:#7B30D0;">...</span><span style="color:#002339;"> })</span></span></code></pre></div><p>Alternatively, when using the <code>defineConfig</code> function, an async function may be passed to it as the first argument:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">config</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">defineConfig</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">async</span><span style="color:#E6E6E6;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">data</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#C586C0;">await</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">asyncFunction</span><span style="color:#E6E6E6;">()</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#C586C0;">return</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#D4D4D4;">...</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">config</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">defineConfig</span><span style="color:#002339;">(</span><span style="color:#DA5221;">async</span><span style="color:#002339;"> () </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">data</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">await</span><span style="color:#002339;"> </span><span style="color:#7EB233;">asyncFunction</span><span style="color:#002339;">()</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">...</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">});</span></span></code></pre></div><h3 id="available-properties" tabindex="-1">Available Properties <a class="header-anchor" href="#available-properties" aria-label="Permalink to &quot;Available Properties&quot;">​</a></h3><p>jsx-email configuration files support the following properties:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#9CDCFE;">esbuild</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  plugins?</span><span style="color:#9CDCFE;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">Plugin</span><span style="color:#E6E6E6;">[]</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#2F86D2;">esbuild</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  plugins?: </span><span style="color:#2F86D2;">Plugin</span><span style="color:#002339;">[]</span></span>
<span class="line"><span style="color:#002339;">}</span></span></code></pre></div><p><em>Optional</em>. Default: <code>undefined</code>. Allows the configuration file to specify <a href="https://esbuild.github.io/plugins" target="_blank" rel="noreferrer">ESBuild Plugins</a> to use during the initial transform from JSX/TSX to JavaScript for the <code>build</code> and <code>preview</code> commands.</p><p>::: note ESBuild plugins are only run when using the CLI&#39;s <code>build</code> or <code>preview</code> commands. ESBuild, and by extension the <code>esbuild</code> configuration option, are not used when using <code>render</code> directly in code :::</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#9CDCFE;">logLevel</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;debug&#39;</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;info&#39;</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;warn&#39;</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;error&#39;</span><span style="color:#E6E6E6;">;</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#2F86D2;">logLevel</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;debug&#39;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;info&#39;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;warn&#39;</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;error&#39;</span><span style="color:#002339;">;</span></span></code></pre></div><p><em>Optional</em>. Default: <code>info</code>. The level at which logs for jsx-email will appear in the terminal / console.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#9CDCFE;">plugins</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">JsxEmailPlugin</span><span style="color:#E6E6E6;">[];</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#2F86D2;">plugins</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">JsxEmailPlugin</span><span style="color:#002339;">[];</span></span></code></pre></div><p><em>Optional</em>. An array of plugins; objects which contain a valid <a href="/docs/core/plugins"><code>JsxEmailPlugin</code> definition</a>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#9CDCFE;">render</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">RenderOptions</span><span style="color:#E6E6E6;">;</span></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#2F86D2;">render</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">RenderOptions</span><span style="color:#002339;">;</span></span></code></pre></div><p><em>Optional</em>. The value specified will be merged with the <a href="https://jsx.email/docs/core/render#method-options" target="_blank" rel="noreferrer"><code>render</code> function options</a> when a render takes place. Please see the <a href="https://jsx.email/docs/core/render#method-options" target="_blank" rel="noreferrer"><code>render</code> documentation</a> for more details.</p>`,29),p=[e];function c(t,r,i,y,E,d){return n(),a("div",null,p)}const m=s(l,[["render",c]]);export{f as __pageData,m as default};
